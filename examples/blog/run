#!/usr/bin/env escript
%% -*- erlang -*-
%%! -config blog.config 

%% Main entry point.
main(_) ->
  setup_codepath(),
  start_apps(),

  % Let's first create our db schema. Database should be already created. All
  % other schemas are auto generated.
  ok = epers:create_schema(),

  % Cleanup authors and posts, so we can have a fresh runup.
  ok = blog:del_author(),
  ok = blog:del_post(),
  ok = blog:del_reader(),

  % Let's create a new blog author and a new blog entry. The result is the
  % same author and post with their new id's filled in.
  Author = blog:new_author("Pepe Gorostiga", <<"some binary jpg">>),
  Post = blog:new_post("How awesome eper is", "It just make things easy", Author),

  % Let's now delete them.
  true = blog:del_post(Post),
  true = blog:del_author(Author),

  % Let's create them again
  Author2 = blog:new_author("Pepe Gorostiga", <<"some binary jpg">>),
  Post2 = blog:new_post("How awesome eper is", "It just make things easy", Author2),

  % Update author and post.
  blog:save_author(blog_author:update_photo(<<"new photo">>, Author2)),
  blog:save_post(blog_post:update_title("My new shiny title", Post2)),

  io:format("A blog: ~p~n", [blog:find_post(blog_post:id(Post2))]),
  io:format("An author: ~p~n", [blog:find_author(blog_author:id(Author2))]),

  % Call a specific method of a repo (not handled by the generic repo, 
  % i.e: a "complex" work).
  io:format("Total number of posts: ~p~n", [blog:total_posts()]),

  % Create a blog reader, in a nother repo and backend.
  Reader = blog:new_reader("Marcelo Gornstein", "marcelo@inakanetworks.com"),
  Reader2 = blog:new_reader("Pepe Gorostiga", "pepe@asd.com"),
  io:format("A Reader: ~p~n", [blog:find_reader(blog_reader:id(Reader))]),

  blog:save_reader(blog_reader:update_email("asd@asd.com", Reader)),
  blog:save_reader(blog_reader:update_email("asd@asd.com", Reader2)),
  io:format("Another Reader: ~p~n", [blog:find_reader(blog_reader:id(Reader))]),

  % Create a vote
  Vote = blog:new_vote(blog_reader:id(Reader2), blog_post:id(Post2)).

setup_codepath() ->
  Dir = filename:dirname(escript:script_name()),
  Deps = [
    "lager", "emysql", "emongo", "eredis", "sqlite3"
  ],
  DepsDir = filename:absname(Dir ++ "/../../deps/"),
  code:add_patha(filename:absname(Dir ++ "/../../ebin")),
  [ code:add_patha(DepsDir ++ "/" ++ X ++ "/ebin") || X <- Deps].

start_apps() ->
  Apps = [
    sasl, compiler, syntax_tools, lager, crypto,
    emysql, emongo, eredis, sqlite3, epers
  ],
  [ ok = application:start(X) || X <- Apps].
